var
  game_board : array[0:63] of char;
  turn : integer;

procedure init_board();
var i : integer;
begin
  for i := 0 to 23 do
    if ((i % 8) + (i % 2)) = 0 then
      game_board[i] := 'x';
    else
      game_board[i] := ' ';
    end;
  end;

  for i := 24 to 39 do
    gameBoard[i] := ' ';
  end;

  for i := 40 to 63 do
    if ((i % 8) + (i % 2)) = 0 then
      game_board[i] := 'x';
    else
      game_board[i] := ' ';
    end;
  end;

  turn = 0;
end;

function pieces_remaining(label : char) : integer;
var i, count : integer;
begin
  remain := 0;
  for i = 0 to 63 do
    if (game_board[i] = label) then
      remain := remain + 1;
    end;
  end;
  return remain;
end;

procedure print_board();
var i : integer;
begin
  $ write(' ', gameBoard[1], " | ", gameBoard[2], " | ", gameBoard[3], ' ', gameBoard[4], " | ", gameBoard[5], " | ", gameBoard[6], ' ', gameBoard[7], '\n');
  $ write("-----------\n");

  i := 0;
  for i := 7 downto 0 do
    write(gameBoard[8*i], gameBoard[8*i + 1], gameBoard[8*i + 2], gameBoard[8*i + 3], gameBoard[8*i + 4], gameBoard[8*i + 5], gameBoard[8*i + 6], gameBoard[8*i + 7], '\n');
  end;
end;

function move_cell(cell, dir : integer);
var new, adj : integer;
begin
  new := cell;
  adj := 0;
  
  if dir = 0 then
    adj := -7;
  else if dir = 1 then
    adj := 9;
  else if dir = 2 then
    adj := 7;
  else if dir = 3 then
    adj := -9;
  end;
  new := new + adj;

  $ This logic implements a cylinder shaped board.
  if game_board[new] = game_board[cell] then
    new := -1;
  else if game_board[new] <> ' ' then
    new := new + adj;

    if game_board[new] <> ' ' then
      new := -2;
    end;
  end;

  return new;
end;

procedure player_move();
var cell, dir, new : integer;
begin
  cell := -1;
  dir := -1;
  new := -1;

  while ~((cell > -1) & (cell < 64) & (new < 0)) do
    write("\nEnter the number of a square with an x: ");
    read(cell);
    write('\n');

    write("\n3 0\n");
    write(" x \n");
    write("2 1\n");

    write("\nPick a direction: \n");
    read(dir)
    write('\n');

    new := move_cell(cel, dir);
  end;

  game_board[cell] = ' ';
  game_board[new] = 'x';

  $ Kind of a stupid way to do this, with the division.
  if (new - cell) > 9 then
    game_board[cell + ((new - cell) / 2)] = ' ';
  end;
end;

procedure player_o_move();
var cell, dir, new : integer;
begin
  cell := -1;
  dir := -1;
  new := -1;

  while ~((cell > -1) & (cell < 64) & (new < 0)) do
    write("\nEnter the number of a square with an o: ");
    read(cell);
    write('\n');

    write("\n3 0\n");
    write(" x \n");
    write("2 1\n");

    write("\nPick a direction: \n");
    read(dir)
    write('\n');

    new := move_cell(cel, dir);
  end;

  game_board[cell] = ' ';
  game_board[new] = 'o';

  $ Kind of a stupid way to do this, with the division.
  if (new - cell) > 9 then
    game_board[cell + ((new - cell) / 2)] = ' ';
  end;
end;

procedure ai_move();
var i, cell, dir : integer;
begin
  for i := 0 to 63 do
    if game_board[i] = 'o' then
      cell = i;
    end;
  end;

  dir = 0;

  $ Note, AI player does not actually move, is not used.
end;

begin
  init_board();

  while (pieces_remaing('x') > 0) & (pieces_remaining('o') > 0) do
    print_board();

    if (turn = 0) then
      player_move();
    else
      player_o_move();
    end;

    turn = (turn + 1) % 2;
  end;

  if pieces_remaining('x') > 0 then
    write("\nPlayer x Won!!!\n");
  else
    write("\nPlayer o Won!!!\n");
  end;

  write("\nGame Over.\n");
end.